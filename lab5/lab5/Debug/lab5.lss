
lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000918  000009ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000918  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  000009b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001222  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000043d  00000000  00000000  00001d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a5  00000000  00000000  000021cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000418  00000000  00000000  00002974  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019da  00000000  00000000  000033ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 08 02 	jmp	0x410	; 0x410 <__vector_10>
  2c:	0c 94 46 02 	jmp	0x48c	; 0x48c <__vector_11>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_17>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  74:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_29>
  78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

000000ac <__trampolines_end>:
  ac:	00 01       	movw	r0, r0
  ae:	00 00       	nop
  b0:	43 01       	movw	r8, r6
  b2:	12 00       	.word	0x0012	; ????
  b4:	02 00       	.word	0x0002	; ????
  b6:	00 00       	nop
  b8:	01 43       	sbci	r16, 0x31	; 49
  ba:	00 03       	mulsu	r16, r16
  bc:	00 00       	nop
  be:	fc 00       	.word	0x00fc	; ????
  c0:	04 01       	movw	r0, r8
  c2:	03 09       	sbc	r16, r3
  c4:	04 e8       	ldi	r16, 0x84	; 132
  c6:	00 12       	cpse	r0, r16
  c8:	02 03       	mulsu	r16, r18
  ca:	09 04       	cpc	r0, r9
  cc:	e0 00       	.word	0x00e0	; ????
  ce:	06 03       	mulsu	r16, r22
  d0:	03 09       	sbc	r16, r3
  d2:	04 d6       	rcall	.+3080   	; 0xcdc <__stack+0x1dd>
  d4:	00 08       	sbc	r0, r0

000000d6 <string3>:
  d6:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000000e0 <string2>:
  e0:	06 03 4d 00 32 00 00 00                             ..M.2...

000000e8 <string1>:
  e8:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
  f8:	65 00 00 00                                         e...

000000fc <string0>:
  fc:	04 03 09 04                                         ....

00000100 <config1_descriptor>:
 100:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 110:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 120:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 130:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 140:	40 00 00                                            @..

00000143 <device_descriptor>:
 143:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 153:	03 01                                               ..

00000155 <endpoint_config_table>:
 155:	00 01 c1 12 01 80 36 01 81 36 00                    ......6..6.

00000160 <__ctors_end>:
 160:	11 24       	eor	r1, r1
 162:	1f be       	out	0x3f, r1	; 63
 164:	cf ef       	ldi	r28, 0xFF	; 255
 166:	da e0       	ldi	r29, 0x0A	; 10
 168:	de bf       	out	0x3e, r29	; 62
 16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
 16c:	11 e0       	ldi	r17, 0x01	; 1
 16e:	a0 e0       	ldi	r26, 0x00	; 0
 170:	b1 e0       	ldi	r27, 0x01	; 1
 172:	e8 e1       	ldi	r30, 0x18	; 24
 174:	f9 e0       	ldi	r31, 0x09	; 9
 176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
 178:	05 90       	lpm	r0, Z+
 17a:	0d 92       	st	X+, r0
 17c:	ac 30       	cpi	r26, 0x0C	; 12
 17e:	b1 07       	cpc	r27, r17
 180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	ac e0       	ldi	r26, 0x0C	; 12
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
 18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
 18c:	a2 31       	cpi	r26, 0x12	; 18
 18e:	b2 07       	cpc	r27, r18
 190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
 192:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
 196:	0c 94 8a 04 	jmp	0x914	; 0x914 <_exit>

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <input_enable>:
}

// Set Input Pins
void input_enable(void)
{
	clear(DDRD,7); // Pin D7 - photo transistor ADC input
 19e:	57 98       	cbi	0x0a, 7	; 10
	clear(DDRB,2); // Pin B2 - firing switch input
 1a0:	22 98       	cbi	0x04, 2	; 4
	
	set(PORTB,2); // Pin B2 - enable pull up resistors on firing switch
 1a2:	2a 9a       	sbi	0x05, 2	; 5
 1a4:	08 95       	ret

000001a6 <output_enable>:
} 

// Set Output Pins
void output_enable(void)
{
	set(DDRB,4); // Pin B4 - N channel 1 output
 1a6:	24 9a       	sbi	0x04, 4	; 4
	set(DDRB,5); // Pin B5 - N channel 2 output
 1a8:	25 9a       	sbi	0x04, 5	; 4
	set(DDRD,0); // Pin D0 - Green LED output
 1aa:	50 9a       	sbi	0x0a, 0	; 10
	set(DDRD,3); // Pin D3 - Red LED 2 output
 1ac:	53 9a       	sbi	0x0a, 3	; 10
 1ae:	08 95       	ret

000001b0 <ADC_enable>:
}

// Enable, but do not start ADC
void ADC_enable(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
	m_clockdivide(3); // reduces clock speed to 2MHz
 1b4:	e1 e6       	ldi	r30, 0x61	; 97
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 e8       	ldi	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	80 83       	st	Z, r24
	
	// set analog conversion
	
	clear(ADMUX,REFS1); // Set voltage reference to 5V
 1c0:	ac e7       	ldi	r26, 0x7C	; 124
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	8c 91       	ld	r24, X
 1c6:	8f 77       	andi	r24, 0x7F	; 127
 1c8:	8c 93       	st	X, r24
	set(ADMUX,REFS0); // ^
 1ca:	8c 91       	ld	r24, X
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	8c 93       	st	X, r24

	clear(ADCSRA,ADPS2); // Scale ADC /8 to 250kHz
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8b 7f       	andi	r24, 0xFB	; 251
 1d8:	80 83       	st	Z, r24
	set(ADCSRA,ADPS1); // ^
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
	set(ADCSRA,ADPS0); // ^
 1e0:	80 81       	ld	r24, Z
 1e2:	81 60       	ori	r24, 0x01	; 1
 1e4:	80 83       	st	Z, r24

	set(DIDR0,ADC7D); // disable 7 pin's digital input
 1e6:	ce e7       	ldi	r28, 0x7E	; 126
 1e8:	d0 e0       	ldi	r29, 0x00	; 0
 1ea:	88 81       	ld	r24, Y
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	88 83       	st	Y, r24

	clear(ADCSRA,ADATE); // clear free-running mode
 1f0:	80 81       	ld	r24, Z
 1f2:	8f 7d       	andi	r24, 0xDF	; 223
 1f4:	80 83       	st	Z, r24

	set(ADCSRB,MUX5);// make input D7
 1f6:	cb e7       	ldi	r28, 0x7B	; 123
 1f8:	d0 e0       	ldi	r29, 0x00	; 0
 1fa:	88 81       	ld	r24, Y
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	88 83       	st	Y, r24
	clear(ADMUX,MUX2); // ^
 200:	8c 91       	ld	r24, X
 202:	8b 7f       	andi	r24, 0xFB	; 251
 204:	8c 93       	st	X, r24
	set(ADMUX,MUX1); // ^
 206:	8c 91       	ld	r24, X
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	8c 93       	st	X, r24
	clear(ADMUX,MUX0); // ^
 20c:	8c 91       	ld	r24, X
 20e:	8e 7f       	andi	r24, 0xFE	; 254
 210:	8c 93       	st	X, r24

	set(ADCSRA,ADIE); // set interrupt bit
 212:	80 81       	ld	r24, Z
 214:	88 60       	ori	r24, 0x08	; 8
 216:	80 83       	st	Z, r24

	set(ADCSRA,ADEN); // demask ADC interrupt
 218:	80 81       	ld	r24, Z
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	80 83       	st	Z, r24

	

}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <timer1_enable>:

// Enable and Begin Timer 1
void timer1_enable(void){
	
	OCR1A = ocr1a_constant;
 224:	60 91 00 01 	lds	r22, 0x0100
 228:	70 91 01 01 	lds	r23, 0x0101
 22c:	80 91 02 01 	lds	r24, 0x0102
 230:	90 91 03 01 	lds	r25, 0x0103
 234:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fixunssfsi>
 238:	70 93 89 00 	sts	0x0089, r23
 23c:	60 93 88 00 	sts	0x0088, r22
	
	set(TCCR1B,CS12); // pre-scale clock /1024 to make timer speed ~2kHz
 240:	e1 e8       	ldi	r30, 0x81	; 129
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	80 81       	ld	r24, Z
 246:	84 60       	ori	r24, 0x04	; 4
 248:	80 83       	st	Z, r24
	clear(TCCR1B,CS11); // ^
 24a:	80 81       	ld	r24, Z
 24c:	8d 7f       	andi	r24, 0xFD	; 253
 24e:	80 83       	st	Z, r24
	set(TCCR1B,CS10); // ^
 250:	80 81       	ld	r24, Z
 252:	81 60       	ori	r24, 0x01	; 1
 254:	80 83       	st	Z, r24
	
	clear(TCCR1B,WGM13); // timer mode up to OCR1A
 256:	80 81       	ld	r24, Z
 258:	8f 7e       	andi	r24, 0xEF	; 239
 25a:	80 83       	st	Z, r24
	set(TCCR1B,WGM12); // ^
 25c:	80 81       	ld	r24, Z
 25e:	88 60       	ori	r24, 0x08	; 8
 260:	80 83       	st	Z, r24
	clear(TCCR1A,WGM11); // ^
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	8d 7f       	andi	r24, 0xFD	; 253
 26a:	80 83       	st	Z, r24
	clear(TCCR1A,WGM10); // ^
 26c:	80 81       	ld	r24, Z
 26e:	8e 7f       	andi	r24, 0xFE	; 254
 270:	80 83       	st	Z, r24
	
	set(TIMSK1,OCIE1A); // interrupt when OCR1A is reached
 272:	ef e6       	ldi	r30, 0x6F	; 111
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <output_init>:
// Set Initial state of system to non-firing, non-charging (off)
void output_init(void)
{
	
	
	clear(PORTD,0); // turn off green light
 27e:	58 98       	cbi	0x0b, 0	; 11
	clear(PORTD,3); // turn off red light
 280:	5b 98       	cbi	0x0b, 3	; 11
	
	clear(PORTB,4); // turn N channel 1 off (charging off)
 282:	2c 98       	cbi	0x05, 4	; 5
	clear(PORTB,5); // turn N channel 2 off (firing off)
 284:	2d 98       	cbi	0x05, 5	; 5
 286:	08 95       	ret

00000288 <ADC_init>:
}

// Begin Measurement of IR Light and charging of capacitor
void ADC_init(void)
{
	sei(); // enable global interrupts
 288:	78 94       	sei

	set(ADCSRA,ADSC); // begin conversion
 28a:	ea e7       	ldi	r30, 0x7A	; 122
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 64       	ori	r24, 0x40	; 64
 292:	80 83       	st	Z, r24
	
	set(PORTD,3); // turn on red light to indicate charging is occurring
 294:	5b 9a       	sbi	0x0b, 3	; 11
	
	set(PORTB,4); // turn on N channel 1 pin (charging on)
 296:	2c 9a       	sbi	0x05, 4	; 5

	TCNT1 = 0x0000; // reset timer 1 count to zero
 298:	10 92 85 00 	sts	0x0085, r1
 29c:	10 92 84 00 	sts	0x0084, r1
 2a0:	08 95       	ret

000002a2 <main>:
************************************************************/

int main(void)
{

	m_red(ON); // Confirm Power
 2a2:	6e 9a       	sbi	0x0d, 6	; 13
 2a4:	76 98       	cbi	0x0e, 6	; 14
	input_enable();
 2a6:	0e 94 cf 00 	call	0x19e	; 0x19e <input_enable>
	output_enable();
 2aa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <output_enable>
	ADC_enable();
 2ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <ADC_enable>
	timer1_enable();
 2b2:	0e 94 12 01 	call	0x224	; 0x224 <timer1_enable>
	m_green(ON); // Confirm Initializations
 2b6:	6a 9a       	sbi	0x0d, 2	; 13
 2b8:	72 98       	cbi	0x0e, 2	; 14
	
	output_init();
 2ba:	0e 94 3f 01 	call	0x27e	; 0x27e <output_init>
	ADC_init();
 2be:	0e 94 44 01 	call	0x288	; 0x288 <ADC_init>
	
	
	
    while(1)
    {
		m_usb_tx_int(firing_ready);
 2c2:	80 91 0c 01 	lds	r24, 0x010C
 2c6:	90 91 0d 01 	lds	r25, 0x010D
 2ca:	0e 94 c9 03 	call	0x792	; 0x792 <m_usb_tx_int>
		// When firing is ready 
		if(firing_ready){
 2ce:	80 91 0c 01 	lds	r24, 0x010C
 2d2:	90 91 0d 01 	lds	r25, 0x010D
 2d6:	89 2b       	or	r24, r25
 2d8:	a1 f3       	breq	.-24     	; 0x2c2 <main+0x20>

			cli(); // Dissable global interrupts
 2da:	f8 94       	cli
			
			set(PORTB,5); // turn on N channel 2 pin (FIREEEEE)
 2dc:	2d 9a       	sbi	0x05, 5	; 5
			
			firing_ready = 0; // turn off firing ready flag
 2de:	10 92 0d 01 	sts	0x010D, r1
 2e2:	10 92 0c 01 	sts	0x010C, r1

			set(PORTD,0); // turn off green light
 2e6:	58 9a       	sbi	0x0b, 0	; 11
			set(PORTD,3); // turn off red light
 2e8:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ea:	2f e7       	ldi	r18, 0x7F	; 127
 2ec:	84 e8       	ldi	r24, 0x84	; 132
 2ee:	9e e1       	ldi	r25, 0x1E	; 30
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <main+0x4e>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0x58>
 2fa:	00 00       	nop
			
			m_wait(10000); // wait 2 seconds for complete discharge
			
			output_init(); // restart initialization
 2fc:	0e 94 3f 01 	call	0x27e	; 0x27e <output_init>
 300:	e0 cf       	rjmp	.-64     	; 0x2c2 <main+0x20>

00000302 <__vector_29>:
Interrupts
************************************************************/

// ADC New Value Interrupt
ISR(ADC_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	8f 93       	push	r24
 30e:	ef 93       	push	r30
 310:	ff 93       	push	r31
	//OCR1A = ocr1a_constant/1023.0*ADC; // set the timer (OCR1A) based on the distance from the IR light
	set(ADCSRA,ADSC); // begin conversion again
 312:	ea e7       	ldi	r30, 0x7A	; 122
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	80 64       	ori	r24, 0x40	; 64
 31a:	80 83       	st	Z, r24
}
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	8f 91       	pop	r24
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_17>:
	
// Timer1 OCR1A Interrupt
ISR(TIMER1_COMPA_vect)
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
	
	clear(PORTB,4); // turn off N channel 1 pin (charging off)
 33a:	2c 98       	cbi	0x05, 4	; 5
	
	set(PORTD,0); //turn on green light to indicate firing is ready
 33c:	58 9a       	sbi	0x0b, 0	; 11
	clear(PORTD,3); // turn off red light to indicate charging is completed
 33e:	5b 98       	cbi	0x0b, 3	; 11
	
	firing_ready = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 0d 01 	sts	0x010D, r25
 348:	80 93 0c 01 	sts	0x010C, r24
}
 34c:	9f 91       	pop	r25
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <m_usb_tx_char>:
			case 18: UEDATX = *buffer++;
			case 17: UEDATX = *buffer++;
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
 35a:	cf 93       	push	r28
			case 14: UEDATX = *buffer++;
 35c:	df 93       	push	r29
 35e:	90 91 11 01 	lds	r25, 0x0111
 362:	99 23       	and	r25, r25
 364:	09 f4       	brne	.+2      	; 0x368 <m_usb_tx_char+0xe>
 366:	4c c0       	rjmp	.+152    	; 0x400 <m_usb_tx_char+0xa6>
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 368:	9f b7       	in	r25, 0x3f	; 63
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
 36a:	f8 94       	cli
 36c:	24 e0       	ldi	r18, 0x04	; 4
 36e:	20 93 e9 00 	sts	0x00E9, r18
 372:	20 91 0f 01 	lds	r18, 0x010F
			case 12: UEDATX = *buffer++;
 376:	22 23       	and	r18, r18
 378:	49 f0       	breq	.+18     	; 0x38c <m_usb_tx_char+0x32>
 37a:	20 91 e8 00 	lds	r18, 0x00E8
 37e:	25 fd       	sbrc	r18, 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 380:	03 c0       	rjmp	.+6      	; 0x388 <m_usb_tx_char+0x2e>
			case 16: UEDATX = *buffer++;
			case 15: UEDATX = *buffer++;
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
 382:	9f bf       	out	0x3f, r25	; 63
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	41 c0       	rjmp	.+130    	; 0x40a <m_usb_tx_char+0xb0>
 388:	10 92 0f 01 	sts	0x010F, r1
			case 10: UEDATX = *buffer++;
 38c:	30 91 e4 00 	lds	r19, 0x00E4
 390:	37 5e       	subi	r19, 0xE7	; 231
 392:	20 91 e8 00 	lds	r18, 0x00E8
 396:	25 fd       	sbrc	r18, 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 398:	24 c0       	rjmp	.+72     	; 0x3e2 <m_usb_tx_char+0x88>
			case 14: UEDATX = *buffer++;
			case 13: UEDATX = *buffer++;
			case 12: UEDATX = *buffer++;
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
 39a:	9f bf       	out	0x3f, r25	; 63
 39c:	90 91 e4 00 	lds	r25, 0x00E4
 3a0:	93 17       	cp	r25, r19
 3a2:	81 f0       	breq	.+32     	; 0x3c4 <m_usb_tx_char+0x6a>
			#endif
			case  8: UEDATX = *buffer++;
 3a4:	90 91 11 01 	lds	r25, 0x0111
 3a8:	99 23       	and	r25, r25
 3aa:	61 f1       	breq	.+88     	; 0x404 <m_usb_tx_char+0xaa>
 3ac:	a9 ee       	ldi	r26, 0xE9	; 233
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3b0:	44 e0       	ldi	r20, 0x04	; 4
			case 11: UEDATX = *buffer++;
			case 10: UEDATX = *buffer++;
			case  9: UEDATX = *buffer++;
			#endif
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
 3b2:	e8 ee       	ldi	r30, 0xE8	; 232
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	c4 ee       	ldi	r28, 0xE4	; 228
 3b8:	d0 e0       	ldi	r29, 0x00	; 0
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <m_usb_tx_char+0x7c>
			case  6: UEDATX = *buffer++;
 3bc:	9f bf       	out	0x3f, r25	; 63
 3be:	98 81       	ld	r25, Y
 3c0:	93 13       	cpse	r25, r19
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <m_usb_tx_char+0x74>
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	80 93 0f 01 	sts	0x010F, r24
			case  5: UEDATX = *buffer++;
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	1e c0       	rjmp	.+60     	; 0x40a <m_usb_tx_char+0xb0>
 3ce:	90 91 11 01 	lds	r25, 0x0111
 3d2:	99 23       	and	r25, r25
			case  4: UEDATX = *buffer++;
 3d4:	c9 f0       	breq	.+50     	; 0x408 <m_usb_tx_char+0xae>
 3d6:	9f b7       	in	r25, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	4c 93       	st	X, r20
 3dc:	20 81       	ld	r18, Z
 3de:	25 ff       	sbrs	r18, 5
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;

		// write the packet
		switch (write_size) {
 3e0:	ed cf       	rjmp	.-38     	; 0x3bc <m_usb_tx_char+0x62>
			case  8: UEDATX = *buffer++;
			case  7: UEDATX = *buffer++;
			case  6: UEDATX = *buffer++;
			case  5: UEDATX = *buffer++;
			case  4: UEDATX = *buffer++;
			case  3: UEDATX = *buffer++;
 3e2:	80 93 f1 00 	sts	0x00F1, r24
 3e6:	80 91 e8 00 	lds	r24, 0x00E8
 3ea:	85 fd       	sbrc	r24, 5
			case  2: UEDATX = *buffer++;
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <m_usb_tx_char+0x9a>
 3ee:	8a e3       	ldi	r24, 0x3A	; 58
 3f0:	80 93 e8 00 	sts	0x00E8, r24
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	80 93 10 01 	sts	0x0110, r24
			default:
			case  1: UEDATX = *buffer++;
 3fa:	9f bf       	out	0x3f, r25	; 63
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <m_usb_tx_char+0xb0>
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	03 c0       	rjmp	.+6      	; 0x40a <m_usb_tx_char+0xb0>
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	01 c0       	rjmp	.+2      	; 0x40a <m_usb_tx_char+0xb0>
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	df 91       	pop	r29
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <__vector_10>:
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 410:	1f 92       	push	r1
 412:	0f 92       	push	r0
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	0f 92       	push	r0
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 418:	11 24       	eor	r1, r1
	return 0;
 41a:	8f 93       	push	r24
 41c:	9f 93       	push	r25
int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 41e:	ef 93       	push	r30
 420:	ff 93       	push	r31
			if (UDFNUML == timeout) {
				transmit_previous_timeout = 1;
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 422:	e1 ee       	ldi	r30, 0xE1	; 225
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
	return 0;
}
 428:	10 82       	st	Z, r1
 42a:	83 ff       	sbrs	r24, 3
 42c:	11 c0       	rjmp	.+34     	; 0x450 <__vector_10+0x40>
 42e:	10 92 e9 00 	sts	0x00E9, r1
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	90 93 eb 00 	sts	0x00EB, r25
 438:	10 92 ec 00 	sts	0x00EC, r1
 43c:	92 e1       	ldi	r25, 0x12	; 18
 43e:	90 93 ed 00 	sts	0x00ED, r25
 442:	98 e0       	ldi	r25, 0x08	; 8
 444:	90 93 f0 00 	sts	0x00F0, r25
		UENUM = 0;
		UECONX = 1;
		UECFG0X = EP_TYPE_CONTROL;
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
		UEIENX = (1<<RXSTPE);
		usb_configuration = 0;
 448:	10 92 11 01 	sts	0x0111, r1
		cdc_line_rtsdtr = 0;
 44c:	10 92 0e 01 	sts	0x010E, r1
        }
	if (intbits & (1<<SOFI)) {
 450:	82 ff       	sbrs	r24, 2
 452:	13 c0       	rjmp	.+38     	; 0x47a <__vector_10+0x6a>
		if (usb_configuration) {
 454:	80 91 11 01 	lds	r24, 0x0111
 458:	88 23       	and	r24, r24
 45a:	79 f0       	breq	.+30     	; 0x47a <__vector_10+0x6a>
			t = transmit_flush_timer;
 45c:	80 91 10 01 	lds	r24, 0x0110
			if (t) {
 460:	88 23       	and	r24, r24
 462:	59 f0       	breq	.+22     	; 0x47a <__vector_10+0x6a>
				transmit_flush_timer = --t;
 464:	81 50       	subi	r24, 0x01	; 1
 466:	80 93 10 01 	sts	0x0110, r24
				if (!t) {
 46a:	81 11       	cpse	r24, r1
 46c:	06 c0       	rjmp	.+12     	; 0x47a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 474:	8a e3       	ldi	r24, 0x3A	; 58
 476:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	2f 93       	push	r18
 49c:	3f 93       	push	r19
 49e:	4f 93       	push	r20
 4a0:	5f 93       	push	r21
 4a2:	6f 93       	push	r22
 4a4:	7f 93       	push	r23
 4a6:	8f 93       	push	r24
 4a8:	9f 93       	push	r25
 4aa:	af 93       	push	r26
 4ac:	bf 93       	push	r27
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	ef 93       	push	r30
 4b4:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 4b6:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 4ba:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 4be:	83 ff       	sbrs	r24, 3
 4c0:	4c c1       	rjmp	.+664    	; 0x75a <__vector_11+0x2ce>
                bmRequestType = UEDATX;
 4c2:	e1 ef       	ldi	r30, 0xF1	; 241
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	60 81       	ld	r22, Z
                bRequest = UEDATX;
 4c8:	80 81       	ld	r24, Z
                wValue = UEDATX;
 4ca:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
 4cc:	90 81       	ld	r25, Z
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	39 2b       	or	r19, r25
                wIndex = UEDATX;
 4d2:	40 81       	ld	r20, Z
                wIndex |= (UEDATX << 8);
 4d4:	90 81       	ld	r25, Z
 4d6:	50 e0       	ldi	r21, 0x00	; 0
 4d8:	59 2b       	or	r21, r25
                wLength = UEDATX;
 4da:	70 81       	ld	r23, Z
                wLength |= (UEDATX << 8);
 4dc:	c0 81       	ld	r28, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4de:	92 ef       	ldi	r25, 0xF2	; 242
 4e0:	90 93 e8 00 	sts	0x00E8, r25
                if (bRequest == GET_DESCRIPTOR) {
 4e4:	86 30       	cpi	r24, 0x06	; 6
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_11+0x5e>
 4e8:	58 c0       	rjmp	.+176    	; 0x59a <__vector_11+0x10e>
 4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <__vector_11+0x68>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
 4ec:	81 e2       	ldi	r24, 0x21	; 33
 4ee:	80 93 eb 00 	sts	0x00EB, r24
					return;
 4f2:	3a c1       	rjmp	.+628    	; 0x768 <__vector_11+0x2dc>
 4f4:	66 e0       	ldi	r22, 0x06	; 6
 4f6:	8c ea       	ldi	r24, 0xAC	; 172
 4f8:	90 e0       	ldi	r25, 0x00	; 0
				}
				desc_val = pgm_read_word(list);
 4fa:	fc 01       	movw	r30, r24
 4fc:	a5 91       	lpm	r26, Z+
 4fe:	b4 91       	lpm	r27, Z
				if (desc_val != wValue) {
 500:	2a 17       	cp	r18, r26
 502:	3b 07       	cpc	r19, r27
 504:	11 f0       	breq	.+4      	; 0x50a <__vector_11+0x7e>
					list += sizeof(struct descriptor_list_struct);
 506:	07 96       	adiw	r24, 0x07	; 7
					continue;
 508:	23 c0       	rjmp	.+70     	; 0x550 <__vector_11+0xc4>
				}
				list += 2;
 50a:	fc 01       	movw	r30, r24
 50c:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
 50e:	a5 91       	lpm	r26, Z+
 510:	b4 91       	lpm	r27, Z
				if (desc_val != wIndex) {
 512:	4a 17       	cp	r20, r26
 514:	5b 07       	cpc	r21, r27
 516:	11 f0       	breq	.+4      	; 0x51c <__vector_11+0x90>
					list += sizeof(struct descriptor_list_struct)-2;
 518:	07 96       	adiw	r24, 0x07	; 7
					continue;
 51a:	1a c0       	rjmp	.+52     	; 0x550 <__vector_11+0xc4>
				}
				list += 2;
 51c:	fc 01       	movw	r30, r24
 51e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
 520:	45 91       	lpm	r20, Z+
 522:	54 91       	lpm	r21, Z
				list += 2;
 524:	fc 01       	movw	r30, r24
 526:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
 528:	24 91       	lpm	r18, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
 52a:	87 2f       	mov	r24, r23
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	9c 2b       	or	r25, r28
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 530:	8f 3f       	cpi	r24, 0xFF	; 255
 532:	91 05       	cpc	r25, r1
 534:	19 f0       	breq	.+6      	; 0x53c <__vector_11+0xb0>
 536:	10 f0       	brcs	.+4      	; 0x53c <__vector_11+0xb0>
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	82 17       	cp	r24, r18
 53e:	08 f4       	brcc	.+2      	; 0x542 <__vector_11+0xb6>
 540:	28 2f       	mov	r18, r24
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 542:	a8 ee       	ldi	r26, 0xE8	; 232
 544:	b0 e0       	ldi	r27, 0x00	; 0
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 546:	70 e1       	ldi	r23, 0x10	; 16
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 548:	6e ef       	ldi	r22, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
 54a:	c1 ef       	ldi	r28, 0xF1	; 241
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	03 c0       	rjmp	.+6      	; 0x556 <__vector_11+0xca>
 550:	61 50       	subi	r22, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 552:	99 f6       	brne	.-90     	; 0x4fa <__vector_11+0x6e>
 554:	cb cf       	rjmp	.-106    	; 0x4ec <__vector_11+0x60>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 556:	8c 91       	ld	r24, X
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 558:	98 2f       	mov	r25, r24
 55a:	95 70       	andi	r25, 0x05	; 5
 55c:	e1 f3       	breq	.-8      	; 0x556 <__vector_11+0xca>
				if (i & (1<<RXOUTI)) return;	// abort
 55e:	82 fd       	sbrc	r24, 2
 560:	03 c1       	rjmp	.+518    	; 0x768 <__vector_11+0x2dc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 562:	32 2f       	mov	r19, r18
 564:	21 31       	cpi	r18, 0x11	; 17
 566:	08 f0       	brcs	.+2      	; 0x56a <__vector_11+0xde>
 568:	37 2f       	mov	r19, r23
				for (i = n; i; i--) {
 56a:	33 23       	and	r19, r19
 56c:	09 f4       	brne	.+2      	; 0x570 <__vector_11+0xe4>
 56e:	f9 c0       	rjmp	.+498    	; 0x762 <__vector_11+0x2d6>
 570:	fa 01       	movw	r30, r20
 572:	83 2f       	mov	r24, r19
					UEDATX = pgm_read_byte(desc_addr++);
 574:	94 91       	lpm	r25, Z
 576:	98 83       	st	Y, r25
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 578:	81 50       	subi	r24, 0x01	; 1
 57a:	31 96       	adiw	r30, 0x01	; 1
 57c:	81 11       	cpse	r24, r1
 57e:	fa cf       	rjmp	.-12     	; 0x574 <__vector_11+0xe8>
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	83 0f       	add	r24, r19
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	01 96       	adiw	r24, 0x01	; 1
 588:	48 0f       	add	r20, r24
 58a:	59 1f       	adc	r21, r25
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 58c:	23 1b       	sub	r18, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 58e:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 590:	21 11       	cpse	r18, r1
 592:	e1 cf       	rjmp	.-62     	; 0x556 <__vector_11+0xca>
 594:	30 31       	cpi	r19, 0x10	; 16
 596:	f9 f2       	breq	.-66     	; 0x556 <__vector_11+0xca>
 598:	e7 c0       	rjmp	.+462    	; 0x768 <__vector_11+0x2dc>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 59a:	85 30       	cpi	r24, 0x05	; 5
 59c:	61 f4       	brne	.+24     	; 0x5b6 <__vector_11+0x12a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 59e:	8e ef       	ldi	r24, 0xFE	; 254
 5a0:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 5a4:	e8 ee       	ldi	r30, 0xE8	; 232
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	80 ff       	sbrs	r24, 0
 5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <__vector_11+0x11c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5ae:	20 68       	ori	r18, 0x80	; 128
 5b0:	20 93 e3 00 	sts	0x00E3, r18
			return;
 5b4:	d9 c0       	rjmp	.+434    	; 0x768 <__vector_11+0x2dc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5b6:	89 30       	cpi	r24, 0x09	; 9
 5b8:	09 f0       	breq	.+2      	; 0x5bc <__vector_11+0x130>
 5ba:	35 c0       	rjmp	.+106    	; 0x626 <__vector_11+0x19a>
 5bc:	61 11       	cpse	r22, r1
 5be:	cd c0       	rjmp	.+410    	; 0x75a <__vector_11+0x2ce>
			usb_configuration = wValue;
 5c0:	20 93 11 01 	sts	0x0111, r18
			cdc_line_rtsdtr = 0;
 5c4:	10 92 0e 01 	sts	0x010E, r1
			transmit_flush_timer = 0;
 5c8:	10 92 10 01 	sts	0x0110, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5cc:	8e ef       	ldi	r24, 0xFE	; 254
 5ce:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5d2:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
 5d4:	25 e5       	ldi	r18, 0x55	; 85
 5d6:	31 e0       	ldi	r19, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
 5d8:	c9 ee       	ldi	r28, 0xE9	; 233
 5da:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
 5dc:	ab ee       	ldi	r26, 0xEB	; 235
 5de:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
 5e0:	0c ee       	ldi	r16, 0xEC	; 236
 5e2:	10 e0       	ldi	r17, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
 5e4:	6d ee       	ldi	r22, 0xED	; 237
 5e6:	70 e0       	ldi	r23, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 5e8:	88 83       	st	Y, r24
				en = pgm_read_byte(cfg++);
 5ea:	a9 01       	movw	r20, r18
 5ec:	4f 5f       	subi	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	f9 01       	movw	r30, r18
 5f2:	94 91       	lpm	r25, Z
				UECONX = en;
 5f4:	9c 93       	st	X, r25
				if (en) {
 5f6:	99 23       	and	r25, r25
 5f8:	61 f0       	breq	.+24     	; 0x612 <__vector_11+0x186>
					UECFG0X = pgm_read_byte(cfg++);
 5fa:	fa 01       	movw	r30, r20
 5fc:	44 91       	lpm	r20, Z
 5fe:	f8 01       	movw	r30, r16
 600:	40 83       	st	Z, r20
					UECFG1X = pgm_read_byte(cfg++);
 602:	f9 01       	movw	r30, r18
 604:	32 96       	adiw	r30, 0x02	; 2
 606:	94 91       	lpm	r25, Z
 608:	2d 5f       	subi	r18, 0xFD	; 253
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	fb 01       	movw	r30, r22
 60e:	90 83       	st	Z, r25
 610:	01 c0       	rjmp	.+2      	; 0x614 <__vector_11+0x188>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
 612:	9a 01       	movw	r18, r20
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 614:	8f 5f       	subi	r24, 0xFF	; 255
 616:	85 30       	cpi	r24, 0x05	; 5
 618:	39 f7       	brne	.-50     	; 0x5e8 <__vector_11+0x15c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 61a:	ea ee       	ldi	r30, 0xEA	; 234
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	8e e1       	ldi	r24, 0x1E	; 30
 620:	80 83       	st	Z, r24
        		UERST = 0;
 622:	10 82       	st	Z, r1
			return;
 624:	a1 c0       	rjmp	.+322    	; 0x768 <__vector_11+0x2dc>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 626:	88 30       	cpi	r24, 0x08	; 8
 628:	81 f4       	brne	.+32     	; 0x64a <__vector_11+0x1be>
 62a:	60 38       	cpi	r22, 0x80	; 128
 62c:	09 f0       	breq	.+2      	; 0x630 <__vector_11+0x1a4>
 62e:	95 c0       	rjmp	.+298    	; 0x75a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 630:	e8 ee       	ldi	r30, 0xE8	; 232
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	80 ff       	sbrs	r24, 0
 638:	fd cf       	rjmp	.-6      	; 0x634 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 63a:	80 91 11 01 	lds	r24, 0x0111
 63e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 642:	8e ef       	ldi	r24, 0xFE	; 254
 644:	80 93 e8 00 	sts	0x00E8, r24
 648:	8f c0       	rjmp	.+286    	; 0x768 <__vector_11+0x2dc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 64a:	81 32       	cpi	r24, 0x21	; 33
 64c:	b9 f4       	brne	.+46     	; 0x67c <__vector_11+0x1f0>
 64e:	61 3a       	cpi	r22, 0xA1	; 161
 650:	09 f0       	breq	.+2      	; 0x654 <__vector_11+0x1c8>
 652:	83 c0       	rjmp	.+262    	; 0x75a <__vector_11+0x2ce>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 654:	e8 ee       	ldi	r30, 0xE8	; 232
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	80 ff       	sbrs	r24, 0
 65c:	fd cf       	rjmp	.-6      	; 0x658 <__vector_11+0x1cc>
 65e:	e4 e0       	ldi	r30, 0x04	; 4
 660:	f1 e0       	ldi	r31, 0x01	; 1
 662:	2b e0       	ldi	r18, 0x0B	; 11
 664:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 666:	a1 ef       	ldi	r26, 0xF1	; 241
 668:	b0 e0       	ldi	r27, 0x00	; 0
 66a:	81 91       	ld	r24, Z+
 66c:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 66e:	e2 17       	cp	r30, r18
 670:	f3 07       	cpc	r31, r19
 672:	d9 f7       	brne	.-10     	; 0x66a <__vector_11+0x1de>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 674:	8e ef       	ldi	r24, 0xFE	; 254
 676:	80 93 e8 00 	sts	0x00E8, r24
 67a:	76 c0       	rjmp	.+236    	; 0x768 <__vector_11+0x2dc>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 67c:	80 32       	cpi	r24, 0x20	; 32
 67e:	d1 f4       	brne	.+52     	; 0x6b4 <__vector_11+0x228>
 680:	61 32       	cpi	r22, 0x21	; 33
 682:	09 f0       	breq	.+2      	; 0x686 <__vector_11+0x1fa>
 684:	6a c0       	rjmp	.+212    	; 0x75a <__vector_11+0x2ce>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 686:	e8 ee       	ldi	r30, 0xE8	; 232
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	82 ff       	sbrs	r24, 2
 68e:	fd cf       	rjmp	.-6      	; 0x68a <__vector_11+0x1fe>
 690:	e4 e0       	ldi	r30, 0x04	; 4
 692:	f1 e0       	ldi	r31, 0x01	; 1
 694:	2b e0       	ldi	r18, 0x0B	; 11
 696:	31 e0       	ldi	r19, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 698:	a1 ef       	ldi	r26, 0xF1	; 241
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	8c 91       	ld	r24, X
 69e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 6a0:	e2 17       	cp	r30, r18
 6a2:	f3 07       	cpc	r31, r19
 6a4:	d9 f7       	brne	.-10     	; 0x69c <__vector_11+0x210>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 6a6:	e8 ee       	ldi	r30, 0xE8	; 232
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	8b ef       	ldi	r24, 0xFB	; 251
 6ac:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6ae:	8e ef       	ldi	r24, 0xFE	; 254
 6b0:	80 83       	st	Z, r24
 6b2:	5a c0       	rjmp	.+180    	; 0x768 <__vector_11+0x2dc>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 6b4:	82 32       	cpi	r24, 0x22	; 34
 6b6:	71 f4       	brne	.+28     	; 0x6d4 <__vector_11+0x248>
 6b8:	61 32       	cpi	r22, 0x21	; 33
 6ba:	09 f0       	breq	.+2      	; 0x6be <__vector_11+0x232>
 6bc:	4e c0       	rjmp	.+156    	; 0x75a <__vector_11+0x2ce>
			cdc_line_rtsdtr = wValue;
 6be:	20 93 0e 01 	sts	0x010E, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6c2:	e8 ee       	ldi	r30, 0xE8	; 232
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	80 ff       	sbrs	r24, 0
 6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <__vector_11+0x23a>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6cc:	8e ef       	ldi	r24, 0xFE	; 254
 6ce:	80 93 e8 00 	sts	0x00E8, r24
 6d2:	4a c0       	rjmp	.+148    	; 0x768 <__vector_11+0x2dc>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 6d4:	81 11       	cpse	r24, r1
 6d6:	1a c0       	rjmp	.+52     	; 0x70c <__vector_11+0x280>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 6d8:	e8 ee       	ldi	r30, 0xE8	; 232
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	80 ff       	sbrs	r24, 0
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <__vector_11+0x250>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 6e2:	62 38       	cpi	r22, 0x82	; 130
 6e4:	51 f4       	brne	.+20     	; 0x6fa <__vector_11+0x26e>
				UENUM = wIndex;
 6e6:	e9 ee       	ldi	r30, 0xE9	; 233
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	40 83       	st	Z, r20
				if (UECONX & (1<<STALLRQ)) i = 1;
 6ec:	80 91 eb 00 	lds	r24, 0x00EB
 6f0:	85 fb       	bst	r24, 5
 6f2:	88 27       	eor	r24, r24
 6f4:	80 f9       	bld	r24, 0
				UENUM = 0;
 6f6:	10 82       	st	Z, r1
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <__vector_11+0x270>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
 6fa:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
 6fc:	e1 ef       	ldi	r30, 0xF1	; 241
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 83       	st	Z, r24
			UEDATX = 0;
 702:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 704:	8e ef       	ldi	r24, 0xFE	; 254
 706:	80 93 e8 00 	sts	0x00E8, r24
 70a:	2e c0       	rjmp	.+92     	; 0x768 <__vector_11+0x2dc>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 70c:	98 2f       	mov	r25, r24
 70e:	9d 7f       	andi	r25, 0xFD	; 253
 710:	91 30       	cpi	r25, 0x01	; 1
 712:	19 f5       	brne	.+70     	; 0x75a <__vector_11+0x2ce>
		  && bmRequestType == 0x02 && wValue == 0) {
 714:	62 30       	cpi	r22, 0x02	; 2
 716:	09 f5       	brne	.+66     	; 0x75a <__vector_11+0x2ce>
 718:	23 2b       	or	r18, r19
 71a:	f9 f4       	brne	.+62     	; 0x75a <__vector_11+0x2ce>
			i = wIndex & 0x7F;
 71c:	4f 77       	andi	r20, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	94 0f       	add	r25, r20
 722:	94 30       	cpi	r25, 0x04	; 4
 724:	d0 f4       	brcc	.+52     	; 0x75a <__vector_11+0x2ce>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 726:	9e ef       	ldi	r25, 0xFE	; 254
 728:	90 93 e8 00 	sts	0x00E8, r25
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 72c:	40 93 e9 00 	sts	0x00E9, r20
				if (bRequest == SET_FEATURE) {
 730:	83 30       	cpi	r24, 0x03	; 3
 732:	21 f4       	brne	.+8      	; 0x73c <__vector_11+0x2b0>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
 734:	81 e2       	ldi	r24, 0x21	; 33
 736:	80 93 eb 00 	sts	0x00EB, r24
 73a:	16 c0       	rjmp	.+44     	; 0x768 <__vector_11+0x2dc>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 73c:	89 e1       	ldi	r24, 0x19	; 25
 73e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <__vector_11+0x2c0>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	4a 95       	dec	r20
 74e:	e2 f7       	brpl	.-8      	; 0x748 <__vector_11+0x2bc>
 750:	ea ee       	ldi	r30, 0xEA	; 234
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	80 83       	st	Z, r24
					UERST = 0;
 756:	10 82       	st	Z, r1
 758:	07 c0       	rjmp	.+14     	; 0x768 <__vector_11+0x2dc>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 75a:	81 e2       	ldi	r24, 0x21	; 33
 75c:	80 93 eb 00 	sts	0x00EB, r24
 760:	03 c0       	rjmp	.+6      	; 0x768 <__vector_11+0x2dc>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 762:	6c 93       	st	X, r22
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 764:	21 11       	cpse	r18, r1
 766:	f7 ce       	rjmp	.-530    	; 0x556 <__vector_11+0xca>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
 768:	ff 91       	pop	r31
 76a:	ef 91       	pop	r30
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	bf 91       	pop	r27
 772:	af 91       	pop	r26
 774:	9f 91       	pop	r25
 776:	8f 91       	pop	r24
 778:	7f 91       	pop	r23
 77a:	6f 91       	pop	r22
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	0f 90       	pop	r0
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	0f 90       	pop	r0
 78e:	1f 90       	pop	r1
 790:	18 95       	reti

00000792 <m_usb_tx_int>:
{
	phex(i);
}

void m_usb_tx_int(int i)
{
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	cd b7       	in	r28, 0x3d	; 61
 7a0:	de b7       	in	r29, 0x3e	; 62
 7a2:	27 97       	sbiw	r28, 0x07	; 7
 7a4:	0f b6       	in	r0, 0x3f	; 63
 7a6:	f8 94       	cli
 7a8:	de bf       	out	0x3e, r29	; 62
 7aa:	0f be       	out	0x3f, r0	; 63
 7ac:	cd bf       	out	0x3d, r28	; 61
	char string[7] = {0,0,0,0,0,0,0};
 7ae:	8e 01       	movw	r16, r28
 7b0:	0f 5f       	subi	r16, 0xFF	; 255
 7b2:	1f 4f       	sbci	r17, 0xFF	; 255
 7b4:	27 e0       	ldi	r18, 0x07	; 7
 7b6:	f8 01       	movw	r30, r16
 7b8:	11 92       	st	Z+, r1
 7ba:	2a 95       	dec	r18
 7bc:	e9 f7       	brne	.-6      	; 0x7b8 <m_usb_tx_int+0x26>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7be:	4a e0       	ldi	r20, 0x0A	; 10
 7c0:	b8 01       	movw	r22, r16
 7c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__itoa_ncheck>
 7c6:	7e 01       	movw	r14, r28
 7c8:	f8 e0       	ldi	r31, 0x08	; 8
 7ca:	ef 0e       	add	r14, r31
 7cc:	f1 1c       	adc	r15, r1
	itoa(i,string,10);
	for(i=0;i<7;i++){
        if(string[i]){
 7ce:	f8 01       	movw	r30, r16
 7d0:	81 91       	ld	r24, Z+
 7d2:	8f 01       	movw	r16, r30
 7d4:	81 11       	cpse	r24, r1
            m_usb_tx_char(string[i]);
 7d6:	0e 94 ad 01 	call	0x35a	; 0x35a <m_usb_tx_char>

void m_usb_tx_int(int i)
{
	char string[7] = {0,0,0,0,0,0,0};
	itoa(i,string,10);
	for(i=0;i<7;i++){
 7da:	0e 15       	cp	r16, r14
 7dc:	1f 05       	cpc	r17, r15
 7de:	b9 f7       	brne	.-18     	; 0x7ce <m_usb_tx_int+0x3c>
        if(string[i]){
            m_usb_tx_char(string[i]);
        }
	}
}
 7e0:	27 96       	adiw	r28, 0x07	; 7
 7e2:	0f b6       	in	r0, 0x3f	; 63
 7e4:	f8 94       	cli
 7e6:	de bf       	out	0x3e, r29	; 62
 7e8:	0f be       	out	0x3f, r0	; 63
 7ea:	cd bf       	out	0x3d, r28	; 61
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	ff 90       	pop	r15
 7f6:	ef 90       	pop	r14
 7f8:	08 95       	ret

000007fa <__fixunssfsi>:
 7fa:	0e 94 34 04 	call	0x868	; 0x868 <__fp_splitA>
 7fe:	88 f0       	brcs	.+34     	; 0x822 <__fixunssfsi+0x28>
 800:	9f 57       	subi	r25, 0x7F	; 127
 802:	98 f0       	brcs	.+38     	; 0x82a <__fixunssfsi+0x30>
 804:	b9 2f       	mov	r27, r25
 806:	99 27       	eor	r25, r25
 808:	b7 51       	subi	r27, 0x17	; 23
 80a:	b0 f0       	brcs	.+44     	; 0x838 <__fixunssfsi+0x3e>
 80c:	e1 f0       	breq	.+56     	; 0x846 <__fixunssfsi+0x4c>
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	1a f0       	brmi	.+6      	; 0x81e <__fixunssfsi+0x24>
 818:	ba 95       	dec	r27
 81a:	c9 f7       	brne	.-14     	; 0x80e <__fixunssfsi+0x14>
 81c:	14 c0       	rjmp	.+40     	; 0x846 <__fixunssfsi+0x4c>
 81e:	b1 30       	cpi	r27, 0x01	; 1
 820:	91 f0       	breq	.+36     	; 0x846 <__fixunssfsi+0x4c>
 822:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_zero>
 826:	b1 e0       	ldi	r27, 0x01	; 1
 828:	08 95       	ret
 82a:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__fp_zero>
 82e:	67 2f       	mov	r22, r23
 830:	78 2f       	mov	r23, r24
 832:	88 27       	eor	r24, r24
 834:	b8 5f       	subi	r27, 0xF8	; 248
 836:	39 f0       	breq	.+14     	; 0x846 <__fixunssfsi+0x4c>
 838:	b9 3f       	cpi	r27, 0xF9	; 249
 83a:	cc f3       	brlt	.-14     	; 0x82e <__fixunssfsi+0x34>
 83c:	86 95       	lsr	r24
 83e:	77 95       	ror	r23
 840:	67 95       	ror	r22
 842:	b3 95       	inc	r27
 844:	d9 f7       	brne	.-10     	; 0x83c <__fixunssfsi+0x42>
 846:	3e f4       	brtc	.+14     	; 0x856 <__fixunssfsi+0x5c>
 848:	90 95       	com	r25
 84a:	80 95       	com	r24
 84c:	70 95       	com	r23
 84e:	61 95       	neg	r22
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	08 95       	ret

00000858 <__fp_split3>:
 858:	57 fd       	sbrc	r21, 7
 85a:	90 58       	subi	r25, 0x80	; 128
 85c:	44 0f       	add	r20, r20
 85e:	55 1f       	adc	r21, r21
 860:	59 f0       	breq	.+22     	; 0x878 <__fp_splitA+0x10>
 862:	5f 3f       	cpi	r21, 0xFF	; 255
 864:	71 f0       	breq	.+28     	; 0x882 <__fp_splitA+0x1a>
 866:	47 95       	ror	r20

00000868 <__fp_splitA>:
 868:	88 0f       	add	r24, r24
 86a:	97 fb       	bst	r25, 7
 86c:	99 1f       	adc	r25, r25
 86e:	61 f0       	breq	.+24     	; 0x888 <__fp_splitA+0x20>
 870:	9f 3f       	cpi	r25, 0xFF	; 255
 872:	79 f0       	breq	.+30     	; 0x892 <__fp_splitA+0x2a>
 874:	87 95       	ror	r24
 876:	08 95       	ret
 878:	12 16       	cp	r1, r18
 87a:	13 06       	cpc	r1, r19
 87c:	14 06       	cpc	r1, r20
 87e:	55 1f       	adc	r21, r21
 880:	f2 cf       	rjmp	.-28     	; 0x866 <__fp_split3+0xe>
 882:	46 95       	lsr	r20
 884:	f1 df       	rcall	.-30     	; 0x868 <__fp_splitA>
 886:	08 c0       	rjmp	.+16     	; 0x898 <__fp_splitA+0x30>
 888:	16 16       	cp	r1, r22
 88a:	17 06       	cpc	r1, r23
 88c:	18 06       	cpc	r1, r24
 88e:	99 1f       	adc	r25, r25
 890:	f1 cf       	rjmp	.-30     	; 0x874 <__fp_splitA+0xc>
 892:	86 95       	lsr	r24
 894:	71 05       	cpc	r23, r1
 896:	61 05       	cpc	r22, r1
 898:	08 94       	sec
 89a:	08 95       	ret

0000089c <__fp_zero>:
 89c:	e8 94       	clt

0000089e <__fp_szero>:
 89e:	bb 27       	eor	r27, r27
 8a0:	66 27       	eor	r22, r22
 8a2:	77 27       	eor	r23, r23
 8a4:	cb 01       	movw	r24, r22
 8a6:	97 f9       	bld	r25, 7
 8a8:	08 95       	ret

000008aa <__itoa_ncheck>:
 8aa:	bb 27       	eor	r27, r27
 8ac:	4a 30       	cpi	r20, 0x0A	; 10
 8ae:	31 f4       	brne	.+12     	; 0x8bc <__itoa_ncheck+0x12>
 8b0:	99 23       	and	r25, r25
 8b2:	22 f4       	brpl	.+8      	; 0x8bc <__itoa_ncheck+0x12>
 8b4:	bd e2       	ldi	r27, 0x2D	; 45
 8b6:	90 95       	com	r25
 8b8:	81 95       	neg	r24
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__utoa_common>

000008c0 <__utoa_ncheck>:
 8c0:	bb 27       	eor	r27, r27

000008c2 <__utoa_common>:
 8c2:	fb 01       	movw	r30, r22
 8c4:	55 27       	eor	r21, r21
 8c6:	aa 27       	eor	r26, r26
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	aa 1f       	adc	r26, r26
 8ce:	a4 17       	cp	r26, r20
 8d0:	10 f0       	brcs	.+4      	; 0x8d6 <__utoa_common+0x14>
 8d2:	a4 1b       	sub	r26, r20
 8d4:	83 95       	inc	r24
 8d6:	50 51       	subi	r21, 0x10	; 16
 8d8:	b9 f7       	brne	.-18     	; 0x8c8 <__utoa_common+0x6>
 8da:	a0 5d       	subi	r26, 0xD0	; 208
 8dc:	aa 33       	cpi	r26, 0x3A	; 58
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <__utoa_common+0x20>
 8e0:	a9 5d       	subi	r26, 0xD9	; 217
 8e2:	a1 93       	st	Z+, r26
 8e4:	00 97       	sbiw	r24, 0x00	; 0
 8e6:	79 f7       	brne	.-34     	; 0x8c6 <__utoa_common+0x4>
 8e8:	b1 11       	cpse	r27, r1
 8ea:	b1 93       	st	Z+, r27
 8ec:	11 92       	st	Z+, r1
 8ee:	cb 01       	movw	r24, r22
 8f0:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <strrev>

000008f4 <strrev>:
 8f4:	dc 01       	movw	r26, r24
 8f6:	fc 01       	movw	r30, r24
 8f8:	67 2f       	mov	r22, r23
 8fa:	71 91       	ld	r23, Z+
 8fc:	77 23       	and	r23, r23
 8fe:	e1 f7       	brne	.-8      	; 0x8f8 <strrev+0x4>
 900:	32 97       	sbiw	r30, 0x02	; 2
 902:	04 c0       	rjmp	.+8      	; 0x90c <strrev+0x18>
 904:	7c 91       	ld	r23, X
 906:	6d 93       	st	X+, r22
 908:	70 83       	st	Z, r23
 90a:	62 91       	ld	r22, -Z
 90c:	ae 17       	cp	r26, r30
 90e:	bf 07       	cpc	r27, r31
 910:	c8 f3       	brcs	.-14     	; 0x904 <strrev+0x10>
 912:	08 95       	ret

00000914 <_exit>:
 914:	f8 94       	cli

00000916 <__stop_program>:
 916:	ff cf       	rjmp	.-2      	; 0x916 <__stop_program>
